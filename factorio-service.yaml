---
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation stack that contains the networking
      resources, such as the subnet and security group, that will be used in this
      stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: vpc-deploy
  InstanceTypeParameter:
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - m5.large
    Description: Enter t3.small or m5.large. Default is t3.small.
  SSHKeyName:
    Type: String
    Description: Enter the name of your ssh key. Required.
    Default: default
  SaveGameBucketName:
    Type: String
    Description: Enter the name of s3 bucket for saves. Required.
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: toddfactorio
  SSHCidrBlock:
    Type: String
    AllowedPattern: ^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$
    Description: Enter desired CIDR block for SSH Access. Required.
  SaveGameName:
    Description: Save game name, will persist even if this stack is deleted. Stored
      in FactorioBucket.
    Type: String
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    Default: 'funtime'
Resources:
  SpotFleetRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Sid: ""
            Effect: Allow
            Principal: 
              Service: "spotfleet.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/factorio/"
      RoleName: SpotFleetRole
      ManagedPolicyArns: 
        - 
          "arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole"
  FactorioInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/factorio/"
      InstanceProfileName: FactorioInstanceProfile
      Roles:
        - 
          Ref: FactorioRole
  FactorioRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/factorio/"
      RoleName: FactorioInstanceRole
      ManagedPolicyArns: []
      Policies:
        - PolicyName: FactorioPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                  - s3:Put*
                Resource:
                  - 'arn:aws:s3:::toddfactorio'
                  - 'arn:aws:s3:::toddfactorio/'
                  - 'arn:aws:s3:::toddfactorio/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource:
                  - arn:aws:logs:*:*:*
  FactorioSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Factorio
      GroupDescription: Factorio Server
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${NetworkStackName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp:
            Ref: SSHCidrBlock
        - IpProtocol: udp
          FromPort: 34197
          ToPort: 34197
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Factorio
  FactorioLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      ImageId: ami-0565af6e282977273
      EbsOptimized: true
      IamInstanceProfile: FactorioInstanceProfile
      InstanceMonitoring: false
      InstanceType: !Ref InstanceTypeParameter
      KeyName: !Ref SSHKeyName
      SecurityGroups:
        - !Ref FactorioSG
      SpotPrice: "0.05"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -ex
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y curl
          sudo apt-get install -y docker-ce
          sudo apt-get -y install awscli
          #curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O
          #sudo python3 ./awslogs-agent-setup.py --region us-east-1
          sudo usermod -aG docker ubuntu
          useradd factorio
          sudo mkdir -p /opt/factorio/{mods,config,data}
          sudo aws s3 cp s3://toddfactorio/server-settings.json /opt/factorio/config/server-settings.json
          sudo aws s3 cp s3://toddfactorio/map-settings.json /opt/factorio/config/map-settings.json
          sudo aws s3 cp s3://toddfactorio/map-gen-settings.json /opt/factorio/config/map-gen-settings.json
          sudo aws s3 cp s3://toddfactorio/mods/* /opt/factorio/mods --recursive
          exists=$(aws s3 ls s3://toddfactorio/saves/textnowmp/funtime.zip)
          if [ -z "$exists" ]; then
            echo "Save game not found... will use auto generated world"
          else
            echo "Save game found in S3 - using that"
            aws s3 cp s3://toddfactorio/saves/textnowmp/funtime.zip /opt/factorio/saves/funtime.zip
            #chown -R factorio:factorio /opt/factorio/saves"
          fi
          chown -R factorio.factorio /opt/factorio
          sudo docker run -d -e MODS=/opt/factorio/mods -p 34197:34197/udp -p 27015:27015/tcp -v /opt/factorio:/factorio --name factorio --restart=always dtandersen/factorio:0.17
          #sudo docker run -d -p 34197:34197/udp -p 27015:27015/tcp -v /opt/factorio:/factorio --name factorio --restart=always dtandersen/factorio:0.17
          echo "find /opt/factorio/saves -mmin -1 -type f -exec /usr/bin/aws s3 cp {} s3://toddfactorio/saves/textnowmp/ \;" >> /opt/factorio/backup-saves.sh
          chmod +x /opt/factorio/backup-saves.sh
          echo "* * * * * /opt/factorio/backup-saves.sh" | crontab -
  FactorioASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: Factorio
      AvailabilityZones:
        - us-east-1b
      LaunchConfigurationName: !Ref FactorioLaunchConfig
      DesiredCapacity: 1
      MinSize: 0
      MaxSize: 1
      VPCZoneIdentifier:
        - subnet-039c6bcb573d86ca3
      Tags:
        - Key: Name
          Value: FactorioServer
          PropagateAtLaunch: 'true'
  #SaveGameBucket:
  #  Type: AWS::S3::Bucket
  #  Properties:
  #    AccessControl: Private
  #    BucketName: toddfactorio
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - 
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/factorio/"
      Policies:
        -
          PolicyName: "useFactorioASG"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: [ 
                  "autoscaling:SetDesiredCapacity",
                  "autoscaling:DescribeAutoScalingGroups"
                ]
                Resource: "*"
        - 
          PolicyName: "writeLambdaCWLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents",
                  "logs:GetLogEvents",
                  "logs:DescribeLogStreams",
                  "logs:DescribeLogGroups",
                  "logs:FilterLogEvents"
                ]
                Resource: "arn:aws:logs:*:*:*"
        -
          PolicyName: "describeEC2instances"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: [ 
                  "ec2:DescribeInstances"
                ]
                Resource: "*"

